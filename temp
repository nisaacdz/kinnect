CREATE TABLE Users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE,
    password_hash VARCHAR(255),
    name VARCHAR(100),
    profile_photo_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/* May merge the Users and the UserAuthProviders into a single table */

CREATE TABLE UserAuthProviders (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    provider VARCHAR(50) NOT NULL, -- E.g., "google", "facebook", "apple"
    provider_user_id VARCHAR(255) NOT NULL, -- The unique ID provided by the third-party auth
    access_token TEXT, -- Optional, for API access (encrypted if stored)
    refresh_token TEXT, -- Optional, for long-lived sessions (encrypted if stored)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (provider, provider_user_id) -- Prevent duplicate entries for the same provider
);

CREATE TABLE ForkedFamilyTrees (
    id SERIAL PRIMARY KEY,
    original_tree_id INT NOT NULL REFERENCES FamilyTrees(id) ON DELETE CASCADE,
    forked_by INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    visibility_level_id INT NOT NULL REFERENCES VisibilityLevels(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE FamilyTrees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    creator_id INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    visibility_level_id INT NOT NULL REFERENCES VisibilityLevels(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Nodes_12323/*Created for each family tree (id 12323)*/ (
    id SERIAL PRIMARY KEY,
    family_tree_id INT NOT NULL REFERENCES FamilyTrees(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    photo_url TEXT,
    description TEXT,
    alias VARCHAR(100),
    is_user BOOLEAN DEFAULT FALSE, -- True if linked to a user account
    user_id INT UNIQUE REFERENCES Users(id) ON DELETE SET NULL, -- Linked user account, if any
    parent_node_id INT REFERENCES Nodes(id) ON DELETE SET NULL, -- For hierarchical relationships
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Admins_12323 /* Created for each family tree (id 12323) */ (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    family_tree_id INT NOT NULL REFERENCES FamilyTrees(id) ON DELETE CASCADE,
    permissioned_node_id INT NOT NULL REFERENCES Nodes(id), -- Node from where user has permission
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE MergeRequests (
    id SERIAL PRIMARY KEY,
    original_tree_id INT NOT NULL REFERENCES FamilyTrees(id) ON DELETE CASCADE,
    target_tree_id INT NOT NULL REFERENCES ForkedFamilyTrees(id) ON DELETE CASCADE,
    status VARCHAR(50) NOT NULL, -- E.g., "pending", "accepted", "rejected"
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
);